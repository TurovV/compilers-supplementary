-- Parser

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr(l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
  lident  @ fun (x) {Var (x)} |
  inbr (s ("("), exp, s (")"))),
    exp = memo $ eta expr(
    {
      [Left, {
        [s("!!"), fun (l, op, r) {Binop(op, l, r)}],
        [s("&&"), fun (l, op, r) {Binop (op, l, r)}]
      }],
      [Nona, {
        [s("<"),  fun (l, op, r) {Binop(op, l, r)}],
        [s(">"),  fun (l, op, r) {Binop(op, l, r)}],
        [s("<="), fun (l, op, r) {Binop(op, l, r)}],
        [s(">="), fun (l, op, r) {Binop(op, l, r)}],
        [s("=="), fun (l, op, r) {Binop(op, l, r)}],
        [s("!="), fun (l, op, r) {Binop(op, l, r)}]
      }],
      [Left, {
        [s("+"),  fun (l, op, r) {Binop(op, l, r)}],
        [s("-"),  fun (l, op, r) {Binop(op, l, r)}]
      }],
      [Left, {
        [s("*"),  fun (l, op, r) {Binop(op, l, r)}],
        [s("/"),  fun (l, op, r) {Binop(op, l, r)}],
        [s("%"),  fun (l, op, r) {Binop(op, l, r)}]
      }]
    }, primary);

var temp = memo $ eta syntax (
  kRead x = inbr[s("("), lident, s(")")] { Read(x) }
  | kSkip { Skip }
  | kWrite x = inbr[s("("), exp, s(")")] { Write(x) }
  | x = lident s[":="] e = exp { Assn(x, e) }
);

var ifBodyParse = memo $ eta syntax (
  e=exp kThen s1=stmt {If (e, s1, Skip)}
  | e=exp kThen s1=stmt kElse s2=stmt {If (e, s1, s2)}
  | e=exp kThen s1=stmt kElif s2=ifBodyParse {If (e, s1, s2)}
);

var kIfParse = memo $ eta syntax (
  kIf e=exp kThen s1=stmt kElse s2=stmt kFi {If (e, s1, s2)}
  | kIf e=exp kThen s1=stmt kFi {If (e, s1, Skip)}
  | kIf e=exp kThen s1=stmt kElif s2=ifBodyParse kFi {If (e, s1, s2)}
);

var finalParse = memo $ eta syntax (
  kWhile e=exp kDo s1=stmt kOd {While (e, s1)}
  | kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo s3=stmt kOd {Seq (s1, While (e, Seq(s3, s2)))}
  | kDo s1=stmt kWhile e=exp kOd {DoWhile (s1, e)}
  | kIfParse
  | temp
);

var stmt = memo $ eta syntax (
  s1=finalParse s[";"] s2=stmt {Seq (s1, s2)}
  | finalParse
);

-- Public top-level parser
public parse = stmt;