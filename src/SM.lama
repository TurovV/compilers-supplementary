-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([stack, state, world], insns) {
  case insns of
    {} -> [stack, state, world]
   | READ : others ->
     case readWorld(world) of
      [value, newWorld] -> eval([value : stack, state, newWorld], others)
     esac
   | WRITE : others ->
     case stack of
       value : stackTail -> eval([stackTail, state, writeWorld(value, world)], others)
     esac
   | BINOP (op) : others ->
     case stack of
       value1 : value2 : stackTail -> eval([(getOp(op) (value2, value1)) : stackTail, state, world], others)
     esac
    | LD (x) : others ->
      eval([evalExpr(state, Var (x)) : stack, state, world], others)
    | ST (x) : others ->
      case stack of
        s : stackTail -> eval([stackTail, state <- [x, s], world], others)
      esac
    | CONST (n) : others -> eval([n : stack, state, world], others)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (x)                -> { LD(x) }
  | Const (x)              -> { CONST(x) }
  | Binop (op, lexp, rexp) -> compileExpr(lexp) +++ compileExpr(rexp) +++ { BINOP(op) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
      Assn (lvalue, expr) -> compileExpr(expr) +++ { ST(lvalue) }
    | Seq (s1, s2) -> compileSM(s1) +++ compileSM(s2)
    | Skip -> {}
    | Read (lvalue) -> { READ, ST(lvalue) }
    | Write (expr) ->  compileExpr(expr) +++ { WRITE }
  esac
}
